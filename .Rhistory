# Part I
students <- c("Melissa", "Jenni", "Jason", "Matt", "Cindy")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class) {
print(student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class) {
print(student)
print(sample(33, 3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (substring == "e") {
print(student)
}
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (substring == 'e') {
print(student)
}
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (substring == 'e') {
print(student)
}
}
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (substring == 'e') {
print(student)
}
}
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (substring == "e") {
print(student)
}
}
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student, 2, 2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (substring == "e") {
print(student)
}
}
# Part I
students <- c("Melissa", "Jenni", "Jason", "Matt", "Cindy")
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student, 2, 2)
print(student)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (substring == "e") {
print(student)
}
}
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student, 2, 2)
print(student)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (substring == "e") {
print(student)
}
}
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student, 2, 2)
print(student)
# Create an if statement to find the names of students where the
# second letter that is an "e".
#if (substring == "e") {
#print(student)
#  }
}
debugSource("~/Class Work/Module 15/jr_high_starter.R")
source("~/Class Work/Module 15/jr_high_starter.R")
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student, 2, 2)
print(student)
# Create an if statement to find the names of students where the
# second letter that is an "e".
#if (substring == "e") {
#print(student)
#  }
}
setwd("~/Class Work/Module 15/15-1-Student_Resources/03_Ins_Vectors/Unsolved")
knitr::opts_chunk$set(echo = TRUE)
students <-read_csv("../Resources/students.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
students <-read_csv("../Resources/students.csv")
knitr::opts_chunk$set(echo = TRUE)
head(students, 10)
# unique(dataset, variable) displays unique elements from that column
unique(students$school_name)
length(unique(students$school_name))
# Use length() to identify the number of schools
# nrow() returns the number of rows
studentCount <- nrow(students)
paste("There are a total of", student_count, "students.")
# nrow() returns the number of rows
student_count <- nrow(students)
paste("There are a total of", student_count, "students.")
mean_reading_score <- mean(students$reading_score)
paste("The average reading score is", mean_reading_score)
mean_math_score <- mean(students$math_score)
paste("The average math score is", mean_math_score)
mean_reading_score <- round(mean(students$reading_score),2)
paste("The average reading score is", mean_reading_score)
mean_math_score <- round(mean(students$math_score), 2)
paste("The average math score is", mean_math_score)
passing_reading <- filter(students, reading_score >=70) %.% nrow()
passing_reading <- filter(students, reading_score >=70) %>% nrow()
percentage_passing_reading <- passing_reading/student_count*100
paste(percentage_passing_reading, "% of the students have passing reading scores.")
passing_reading <- filter(students, reading_score >=70) %>% nrow()
percentage_passing_reading <- round(passing_reading/student_count*100, 2)
paste(percentage_passing_reading, "% of the students have passing reading scores.")
passing_math <- filter(students, math_score >=70) %.% nrow()
passing_math <- filter(students, math_score >=70) %>% nrow()
percentage_passing_math <- round(passing_math/student_count*100, 2)
paste(percentage_passing_reading, "% of the students have passing reading scores.")
paste(percentage_passing_math, "% of the students have passing math scores.")
passing_overall <- filter(students, math_score >=70, reading_score >= 70) %>% nrow()
percentage_passing_overall <- round(passing_overall/student_count*100, 2)
paste(percentage_passing_overall, "% of the students have passing math and reading scores.")
install.packages("tidyverse")
setwd("~/GitHub/MechaCar_Statistical_Analysis")
library(dplyr)
#read in MPG csv file
mpg <- read.csv("MechaCar_mpg.csv", header = TRUE)
View(mpg)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearnace + AWD, data=mpg)
#perform linear regression on mpg dataset
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg))
?lm()
library(dplyr)
#read in MPG csv file
mpg <- read.csv("MechaCar_mpg.csv", header = TRUE)
#perform linear regression on mpg dataset
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg))
lm(mpg ~ vehicle_length, mpg)
lm(mpg ~ vehicle_weight, mpg)
library(dplyr)
#read in MPG csv file
mpg <- read.csv("MechaCar_mpg.csv", header = TRUE)
#perform linear regression on mpg dataset
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg))
sus_coil <- read.csv("Suspension_Coil.csv", header = TRUE)
View(sus_coil)
coilPSI <- sus_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median_PSI=median(PSI),Variance=var(PSI),SD=sd(PSI) .groups = 'keep') #create summary table with multiple columns
coilPSI <- sus_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median_PSI=median(PSI),Variance=var(PSI),SD=sd(PSI))
total_summary <- as.DataFrame(sus_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median_PSI=median(PSI),Variance=var(PSI),SD=sd(PSI)))
total_summary <- data.frame(sus_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median_PSI=median(PSI),Variance=var(PSI),SD=sd(PSI))) #create summary table with multiple columns
library(dplyr)
#read in MPG csv file
mpg <- read.csv("MechaCar_mpg.csv", header = TRUE)
#perform linear regression on mpg dataset
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg)
#summarize the multiple linear regression
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg))
# read in the suspension coil dataset
sus_coil <- read.csv("Suspension_Coil.csv", header = TRUE)
total_summary <- data.frame(sus_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median_PSI=median(PSI),Variance=var(PSI),SD=sd(PSI))) #create summary table with multiple columns
print(total_summary)
View(total_summary)
library(dplyr)
#read in MPG csv file
mpg <- read.csv("MechaCar_mpg.csv", header = TRUE)
#perform linear regression on mpg dataset
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg)
#summarize the multiple linear regression
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg))
# read in the suspension coil dataset
sus_coil <- read.csv("Suspension_Coil.csv", header = TRUE)
total_summary <- data.frame (sus_coil%>% summarize(Mean=mean(PSI),Median_PSI=median(PSI),Variance=var(PSI),SD=sd(PSI))
lot_summary <- data.frame(sus_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median_PSI=median(PSI),Variance=var(PSI),SD=sd(PSI))) #create summary table with multiple columns
library(dplyr)
#read in MPG csv file
mpg <- read.csv("MechaCar_mpg.csv", header = TRUE)
#perform linear regression on mpg dataset
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg)
#summarize the multiple linear regression
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg))
# read in the suspension coil dataset
sus_coil <- read.csv("Suspension_Coil.csv", header = TRUE)
total_summary <- data.frame(sus_coil %>% summarize(Mean=mean(PSI),Median_PSI=median(PSI),Variance=var(PSI),SD=sd(PSI)))
lot_summary <- data.frame(sus_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median_PSI=median(PSI),Variance=var(PSI),SD=sd(PSI))) #create summary table with multiple columns
View(sus_coil)
View(total_summary)
View(lot_summary)
t.test(lot_summary$Mean, mu=mean(total_summary$Mean))
t.test(total_summary$Mean, mu=1500)
t.test(sus_coil$PSI, mu=1500)
t.test(sus_coil$PSI, mu=1500, subset(sus_coil$Manufacturing_Lot))
t.test(sus_coil$PSI, mu=1500, subset(sus_coil$Manufacturing_Lot="Lot1"))
t.test(sus_coil$PSI, mu=1500, subset(sus_coil$Manufacturing_Lot["Lot1"]))
t.test(sus_coil$PSI, mu=1500, subset=sus_coil$Manufacturing_Lot["Lot1"])
t.test(sus_coil$PSI, mu=1500)
t.test(sus_coil$PSI, mu=1500, subset=sus_coil$Manufacturing_Lot["Lot1"])
t.test(sus_coil$PSI, mu=1500, subset=sus_coil$Manufacturing_Lot["Lot2"])
t.test(sus_coil$PSI, mu=1500, subset=sus_coil$Manufacturing_Lot["Lot3"])
?t.test()
t.test(psi ~ 1, data=sus_coil, mu=1500, subset=sus_coil$Manufacturing_Lot["Lot1"])
t.test(PSI ~ 1, data=sus_coil, mu=1500, subset=sus_coil$Manufacturing_Lot["Lot1"])
t.test(PSI, data=sus_coil, mu=1500, subset=sus_coil$Manufacturing_Lot["Lot1"])
t.test(PSI~1, data=sus_coil, mu=1500, subset=sus_coil$Manufacturing_Lot["Lot1"])
t.test(PSI~1, data=lot_summary, mu=1500, subset=lot_summary$Manufacturing_Lot["Lot1"])
t.test(Mean~1, data=lot_summary, mu=1500, subset=lot_summary$Manufacturing_Lot["Lot1"])
t.test(Mean, data=lot_summary, mu=1500, subset=lot_summary$Manufacturing_Lot["Lot1"])
t.test(sus_coil$PSI, data=sus_coil, mu=1500, subset=lot_summary$Manufacturing_Lot=="Lot1")
t.test(sus_coil$PSI, data=sus_coil, mu=1500, subset=sus_coil$Manufacturing_Lot=="Lot1")
t.test(sus_coil$PSI, mu=1500, subset=sus_coil$Manufacturing_Lot=="Lot2")
t.test(formula = PSI ~ Manufacturing_Lot, data = sus_coil, subset = Manufacturing_Lot == "Lot1")
t.test(formula = PSI ~ 1, data = sus_coil, subset = Manufacturing_Lot == "Lot1")
t.test(formula = PSI ~ 1, data = sus_coil, subset = Manufacturing_Lot == "Lot2")
t.test(formula = PSI ~ 1, data = sus_coil, subset = Manufacturing_Lot == "Lot3")
library(dplyr)
#read in MPG csv file
mpg <- read.csv("MechaCar_mpg.csv", header = TRUE)
#perform linear regression on mpg dataset
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg)
#summarize the multiple linear regression
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg))
# read in the suspension coil dataset
sus_coil <- read.csv("Suspension_Coil.csv", header = TRUE)
#create dataframe of the summary statistics of the suspension coil dataset
total_summary <- data.frame(sus_coil %>% summarize(Mean=mean(PSI),Median_PSI=median(PSI),Variance=var(PSI),SD=sd(PSI)))
lot_summary <- data.frame(sus_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median_PSI=median(PSI),Variance=var(PSI),SD=sd(PSI))) #create summary table with multiple columns
t.test(sus_coil$PSI, mu=1500)
t.test(formula = PSI ~ 1, data = sus_coil, subset = Manufacturing_Lot == "Lot1")
t.test(formula = PSI ~ 1, data = sus_coil, subset = Manufacturing_Lot == "Lot2")
t.test(formula = PSI ~ 1, data = sus_coil, subset = Manufacturing_Lot == "Lot3")
t.test(formula = PSI ~ 1, data = sus_coil, mu=1500, subset = Manufacturing_Lot == "Lot1")
library(dplyr)
#read in MPG csv file
mpg <- read.csv("MechaCar_mpg.csv", header = TRUE)
#perform linear regression on mpg dataset
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg)
#summarize the multiple linear regression
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg))
# read in the suspension coil dataset
sus_coil <- read.csv("Suspension_Coil.csv", header = TRUE)
#create dataframe of the summary statistics of the suspension coil dataset
total_summary <- data.frame(sus_coil %>% summarize(Mean=mean(PSI),Median_PSI=median(PSI),Variance=var(PSI),SD=sd(PSI)))
lot_summary <- data.frame(sus_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median_PSI=median(PSI),Variance=var(PSI),SD=sd(PSI))) #create summary table with multiple columns
t.test(sus_coil$PSI, mu=1500)
t.test(formula = PSI ~ 1, data = sus_coil, mu=1500, subset = Manufacturing_Lot == "Lot1")
t.test(formula = PSI ~ 1, data = sus_coil, mu=1500, subset = Manufacturing_Lot == "Lot2")
t.test(formula = PSI ~ 1, data = sus_coil, mu=1500, subset = Manufacturing_Lot == "Lot3")
